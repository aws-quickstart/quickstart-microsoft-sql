AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template deploys two Windows Server Failover Clustering (WSFC) and SQL Server
  AlwaysOn Availability Group nodes. This template is intended to be installed into
  an existing VPC that was built using the sample reference architecture titled: "Implementing
  Active Directory Domain Services in the AWS Cloud" **WARNING** This template creates
  Amazon EC2 Windows instance and related resources. You will be billed for the AWS
  resources used if you create a stack from this template. QS(0003)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - ThirdAZ
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - HostType
          - DedicatedHostAMI
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - ADScenarioType
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
          - DomainMemberSGID
      - Label:
          default: Microsoft SQL Server Configuration
        Parameters:
          - SQLServerVersion
          - SQLServiceAccount
          - SQLServiceAccountPassword
          - SQLLicenseProvided
          - Volume1Size
          - Volume1Type
          - Volume1Iops
          - Volume2Size
          - Volume2Type
          - Volume2Iops
          - Volume3Size
          - Volume3Type
          - Volume3Iops
      - Label:
          default: Failover Cluster Configuration
        Parameters:
          - WSFCFileServerInstanceType
          - WSFCFileServerNetBIOSName
          - WSFCFileServerPrivateIP
          - WSFCNode1InstanceType
          - WSFCNode1NetBIOSName
          - WSFCNode1PrivateIP1
          - WSFCNode1PrivateIP2
          - WSFCNode1PrivateIP3
          - DedicatedHostIDNode1
          - WSFCNode2InstanceType
          - WSFCNode2NetBIOSName
          - WSFCNode2PrivateIP1
          - WSFCNode2PrivateIP2
          - WSFCNode2PrivateIP3
          - DedicatedHostIDNode2
          - WSFCNode3InstanceType
          - WSFCNode3NetBIOSName
          - WSFCNode3PrivateIP1
          - WSFCNode3PrivateIP2
          - WSFCNode3PrivateIP3
          - DedicatedHostIDNode3
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      ADScenarioType:
        default: AD Scenario Type
      DedicatedHostAMI:
        default: BYOL AMI to Use on Dedicated Host
      DedicatedHostIDNode1:
        default: Dedicated HostID for Node 1 (requires Tenancy set to "Dedicated Host")
      DedicatedHostIDNode2:
        default: Dedicated HostID for Node 2 (requires Tenancy set to "Dedicated Host")
      DedicatedHostIDNode3:
        default: Dedicated HostID for Node 3 (requires Tenancy set to "Dedicated Host")
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainMemberSGID:
        default: Security Group ID for AD Domain Members
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      HostType:
        default: Tenancy
      KeyPairName:
        default: Key Pair Name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      SQLLicenseProvided:
        default: Amazon-Provided SQL Server License
      SQLServerVersion:
        default: SQL Server Version
      SQLServiceAccount:
        default: Service Account Name
      SQLServiceAccountPassword:
        default: Service Account Password
      ThirdAZ:
        default: Third AZ
      Volume1Iops:
        default: Data Volume IOPS
      Volume1Size:
        default: Data Volume Size
      Volume1Type:
        default: Data Volume Type
      Volume2Iops:
        default: Logs Volume IOPS
      Volume2Size:
        default: Logs Volume Size
      Volume2Type:
        default: Logs Volume Type
      Volume3Iops:
        default: TempDB Volume IOPS
      Volume3Size:
        default: TempDB Volume Size
      Volume3Type:
        default: TempDB Volume Type
      VPCID:
        default: VPC ID
      WSFCFileServerInstanceType:
        default: File Server Instance Type
      WSFCFileServerNetBIOSName:
        default: File Server NetBIOS Name
      WSFCFileServerPrivateIP:
        default: File Server Private IP Address
      WSFCNode1InstanceType:
        default: Instance Type for Cluster Node 1
      WSFCNode1NetBIOSName:
        default: Cluster Node 1 NetBIOS Name
      WSFCNode1PrivateIP1:
        default: Cluster Node 1 Private IP Address 1
      WSFCNode1PrivateIP2:
        default: Cluster Node 1 Private IP Address 2
      WSFCNode1PrivateIP3:
        default: Cluster Node 1 Private IP Address 3
      WSFCNode2InstanceType:
        default: Instance Type for Cluster Node 2
      WSFCNode2NetBIOSName:
        default: Cluster Node 2 NetBIOS Name
      WSFCNode2PrivateIP1:
        default: Cluster Node 2 Private IP Address 1
      WSFCNode2PrivateIP2:
        default: Cluster Node 2 Private IP Address 2
      WSFCNode2PrivateIP3:
        default: Cluster Node 2 Private IP Address 3
      WSFCNode3InstanceType:
        default: Instance Type for Cluster Node 3
      WSFCNode3NetBIOSName:
        default: Cluster Node 3 NetBIOS Name
      WSFCNode3PrivateIP1:
        default: Cluster Node 3 Private IP Address 1
      WSFCNode3PrivateIP2:
        default: Cluster Node 3 Private IP Address 2
      WSFCNode3PrivateIP3:
        default: Cluster Node 3 Private IP Address 3
Parameters:
  ADScenarioType:
    AllowedValues:
      - AWS Directory Service for Microsoft AD (Enterprise Edition)
      - Microsoft AD on Amazon EC2
    Default: AWS Directory Service for Microsoft AD (Enterprise Edition)
    Description: 'Select the type of AD DS deployment to use: AWS Directory Service
      for Microsoft AD or managing your own Amazon EC2 AD instances.'
    Type: String
  AdminSecrets:
    Description: "AWS Secrets Parameter Name that has Password and User name for a domain administrator."
    Type: "String"
  DedicatedHostAMI:
    Default: ''
    Description: If host type is set to "Dedicated" or "Dedicated Host", you need
      to specify your imported BYOL AMI id
    Type: String
  DedicatedHostIDNode1:
    Default: ''
    Description: Dedicated HostID for Node1, Only used if HostType is set to "host"
    Type: String
  DedicatedHostIDNode2:
    Default: ''
    Description: Dedicated HostID for Node2, Only used if HostType is set to "host"
    Type: String
  DedicatedHostIDNode3:
    Default: ''
    Description: Dedicated HostID for the optional Node3, Only used if HostType is
      set to "host"
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) e.g. example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainMemberSGID:
    Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: EXAMPLE
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  HostType:
    AllowedValues:
      - Shared
      - Dedicated
      - Dedicated Host
    Default: Shared
    Description: 'Host Type, NB: For dedicated types, you must already have suitable
      dedicated hosts in your account'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Default: ''
    Description: (Optional) ID of the optional private subnet 3 in Availability Zone
      3 (e.g., subnet-a0246dcd)
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-sql/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  SQLLicenseProvided:
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'yes'
    Description: License SQL Server from AWS Marketplace
    Type: String
  SQLServerVersion:
    AllowedValues:
      - '2017'
      - '2016'
    Default: '2017'
    Description: Version of SQL Server to install on Failover Cluster Nodes
    Type: String
  SQLServiceAccount:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: sqlsa
    Description: User name for the SQL Server Service Account. This Account is a Domain
      User.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  SQLServiceAccountPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the SQL Service account. Must be at least 8 characters
      containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  ThirdAZ:
    AllowedValues:
      - 'no'
      - witness
      - full
    Default: 'no'
    Description: Enable a 3 AZ deployment, the 3rd AZ can either be used just for
      the witness, or can be a full SQL cluster node.
    Type: String
  Volume1Iops:
    Default: '1000'
    Description: Iops for the SQL Data drive (only used when volume type is io1)
    MaxValue: '20000'
    MinValue: '100'
    Type: Number
  Volume1Size:
    Default: '500'
    Description: Volume size for the SQL Data drive, in GiB
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  Volume1Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL Data drive
    Type: String
  Volume2Iops:
    Default: '1000'
    Description: Iops for the SQL Logs drive (only used when volume type is io1)
    MaxValue: '20000'
    MinValue: '100'
    Type: Number
  Volume2Size:
    Default: '500'
    Description: Volume size for the SQL Logs drive, in GiB
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  Volume2Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL Logs drive
    Type: String
  Volume3Iops:
    Default: '1000'
    Description: Iops for the SQL TempDB drive (only used when volume type is io1)
    MaxValue: '20000'
    MinValue: '100'
    Type: Number
  Volume3Size:
    Default: '500'
    Description: Volume size for the SQL TempDB drive, in GiB
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  Volume3Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL TempDB drive
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  WSFCFileServerInstanceType:
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
    Default: t2.small
    Description: Amazon EC2 instance type for a fileserver used to share install media,
      witness and replication folders
    Type: String
  WSFCFileServerNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: WSFCFileServer
    Description: NetBIOS name of the WSFCFileServer (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCFileServerPrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.200
    Description: Primary private IP for the fileserver located in Availability Zone
      1
    Type: String
  WSFCNode1InstanceType:
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
    ConstraintDescription: Only EBS Optimized instance types r4.xlarge, r4.2xlarge,
      r4.4xlarge, r4.8xlarge allowed
    Default: r4.2xlarge
    Description: Amazon EC2 instance type for the first WSFC Node
    Type: String
  WSFCNode1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: WSFCNode1
    Description: NetBIOS name of the first WSFC Node (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCNode1PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.100
    Description: Primary private IP for the first WSFC Node located in Availability
      Zone 1
    Type: String
  WSFCNode1PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.101
    Description: Secondary private IP for WSFC cluster on first WSFC Node
    Type: String
  WSFCNode1PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.102
    Description: Third private IP for Availability Group Listener on first WSFC Node
    Type: String
  WSFCNode2InstanceType:
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
    ConstraintDescription: Only EBS Optimized instance types r4.xlarge, r4.2xlarge,
      r4.4xlarge, r4.8xlarge allowed
    Default: r4.2xlarge
    Description: Amazon EC2 instance type for the second WSFC Node
    Type: String
  WSFCNode2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: WSFCNode2
    Description: NetBIOS name of the second WSFC Node (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCNode2PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.100
    Description: Primary private IP for the second WSFC Node located in Availability
      Zone 2
    Type: String
  WSFCNode2PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.101
    Description: Secondary private IP for WSFC cluster on second WSFC Node
    Type: String
  WSFCNode2PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.102
    Description: Third private IP for Availability Group Listener on second WSFC Node
    Type: String
  WSFCNode3InstanceType:
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
    ConstraintDescription: Only EBS Optimized instance types r4.xlarge, r4.2xlarge,
      r4.4xlarge, r4.8xlarge allowed
    Default: r4.2xlarge
    Description: Amazon EC2 instance type for the third WSFC Node
    Type: String
  WSFCNode3NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: WSFCNode3
    Description: NetBIOS name of the third WSFC Node (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  WSFCNode3PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.64.100
    Description: Primary private IP for the optional third WSFC Node located in Availability
      Zone 3
    Type: String
  WSFCNode3PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.64.101
    Description: Secondary private IP for WSFC cluster on optional third WSFC Node
    Type: String
  WSFCNode3PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.64.102
    Description: Third private IP for Availability Group Listener on optional third
      WSFC Node
    Type: String
  WS2019FULLBASE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
  WS2019FULLSQL2016SP2ENT:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2016_SP2_Enterprise'
  WS2019FULLSQL2017ENT:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-SQL_2017_Enterprise'
Conditions:
  UseAWSDirectoryServiceEE: !Equals
    - !Ref 'ADScenarioType'
    - AWS Directory Service for Microsoft AD (Enterprise Edition)
  IsThreeAz: !Not
    - !Equals
      - !Ref 'ThirdAZ'
      - 'no'
  ThirdAzIsWitness: !Equals
    - !Ref 'ThirdAZ'
    - witness
  ThirdAzIsFullNode: !Equals
    - !Ref 'ThirdAZ'
    - full
  IsTwoNode: !Not
    - !Equals
      - !Ref 'ThirdAZ'
      - full
  Vol1IsIo1: !Equals
    - !Ref 'Volume1Type'
    - io1
  Vol2IsIo1: !Equals
    - !Ref 'Volume1Type'
    - io1
  Vol3IsIo1: !Equals
    - !Ref 'Volume1Type'
    - io1
  HostTypeIsDefault: !Equals
    - !Ref 'HostType'
    - Shared
  HostTypeIsDediHost: !Equals
    - !Ref 'HostType'
    - Dedicated Host
  ByolAmi: !Not
    - !Equals
      - !Ref 'HostType'
      - Shared
  SQLBakedInAMI: !Equals
    - !Ref 'SQLLicenseProvided'
    - 'yes'
  SQLVersion2017: !Equals
    - !Ref 'SQLServerVersion'
    - '2017'
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
Resources:
  SQLSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'SQLSecrets-${AWS::StackName}'
      Description: MS SQL Credentials for Quick Start
      SecretString: !Sub '{"username":"${SQLServiceAccount}","password":"${SQLServiceAccountPassword}"}'
  WSFCRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'SQLSecrets'
                  - !Ref 'AdminSecrets'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'
          PolicyName: QS-MSSQL-SSM
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  WSFCProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'WSFCRole'
      Path: /
  WSFCFileServer:
    Type: AWS::EC2::Instance
    Condition: IsTwoNode
    Properties:
      ImageId: !Ref WS2019FULLBASE
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCFileServerInstanceType'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !If
            - ThirdAzIsWitness
            - !Ref 'PrivateSubnet3ID'
            - !Ref 'PrivateSubnet1ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCFileServerPrivateIP'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCFileServerNetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -c config -s '
            - !Ref 'AWS::StackId'
            - ' -r WSFCFileServer '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  WSFCNode1:
    Type: AWS::EC2::Instance
    Properties:
      Affinity: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - !Ref 'AWS::NoValue'
          - default
      HostId: !If
        - HostTypeIsDediHost
        - !Ref 'DedicatedHostIDNode1'
        - !Ref 'AWS::NoValue'
      Tenancy: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - default
          - dedicated
      ImageId: !If
        - ByolAmi
        - !Ref 'DedicatedHostAMI'
        - !If
            - SQLBakedInAMI
            - !If
                - 'SQLVersion2017'
                - !Ref WS2019FULLSQL2017ENT
                - !Ref WS2019FULLSQL2016SP2ENT
            - !Ref WS2019FULLBASE
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCNode1InstanceType'
      EbsOptimized: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref 'PrivateSubnet1ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP1'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP2'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode1PrivateIP3'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCNode1NetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref 'KeyPairName'
      #UserData: !Base64
      #  Fn::Join:
      #    - ''
      #    - - "<script>\n"
      #      - 'cfn-init.exe -v -c config -s '
      #      - !Ref 'AWS::StackId'
      #      - ' -r WSFCNode1 '
      #      - ' --region '
      #      - !Ref 'AWS::Region'
      #      - "\n"
      #      - </script>
  WSFCNode3:
    Type: AWS::EC2::Instance
    Condition: ThirdAzIsFullNode
    Properties:
      Affinity: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - !Ref 'AWS::NoValue'
          - default
      HostId: !If
        - HostTypeIsDediHost
        - !Ref 'DedicatedHostIDNode3'
        - !Ref 'AWS::NoValue'
      Tenancy: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - default
          - dedicated
      ImageId: !If
        - ByolAmi
        - !Ref 'DedicatedHostAMI'
        - !If
            - SQLBakedInAMI
            - !If
                - 'SQLVersion2017'
                - !Ref WS2019FULLSQL2017ENT
                - !Ref WS2019FULLSQL2016SP2ENT
            - !Ref WS2019FULLBASE
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCNode3InstanceType'
      EbsOptimized: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref 'PrivateSubnet3ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCNode3PrivateIP1'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode3PrivateIP2'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode3PrivateIP3'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCNode3NetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref 'KeyPairName'
      #UserData: !Base64
      #  Fn::Join:
      #    - ''
      #    - - "<script>\n"
      #      - 'cfn-init.exe -v -c config -s '
      #      - !Ref 'AWS::StackId'
      #      - ' -r WSFCNode3 '
      #      - ' --region '
      #      - !Ref 'AWS::Region'
      #      - "\n"
      #      - </script>
  WSFCNode2:
    Type: AWS::EC2::Instance
    Properties:
      Affinity: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - !Ref 'AWS::NoValue'
          - default
      HostId: !If
        - HostTypeIsDediHost
        - !Ref 'DedicatedHostIDNode2'
        - !Ref 'AWS::NoValue'
      Tenancy: !If
        - HostTypeIsDediHost
        - host
        - !If
          - HostTypeIsDefault
          - default
          - dedicated
      ImageId: !If
        - ByolAmi
        - !Ref 'DedicatedHostAMI'
        - !If
            - SQLBakedInAMI
            - !If
                - 'SQLVersion2017'
                - !Ref WS2019FULLSQL2017ENT
                - !Ref WS2019FULLSQL2016SP2ENT
            - !Ref WS2019FULLBASE
      IamInstanceProfile: !Ref 'WSFCProfile'
      InstanceType: !Ref 'WSFCNode2InstanceType'
      EbsOptimized: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref 'PrivateSubnet2ID'
          PrivateIpAddresses:
            - Primary: 'true'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP1'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP2'
            - Primary: 'false'
              PrivateIpAddress: !Ref 'WSFCNode2PrivateIP3'
          GroupSet:
            - !Ref 'DomainMemberSGID'
            - !Ref 'WSFCSecurityGroup'
            - !Ref 'WSFCClientSecurityGroup'
      Tags:
        - Key: Name
          Value: !Ref 'WSFCNode2NetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref 'KeyPairName'
      #UserData: !Base64
      #  Fn::Join:
      #    - ''
      #    - - "<script>\n"
      #      - 'cfn-init.exe -v -c config -s '
      #      - !Ref 'AWS::StackId'
      #      - ' -r WSFCNode2 '
      #      - ' --region '
      #      - !Ref 'AWS::Region'
      #      - "\n"
      #      - </script>
  WSFCNode1Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume1Size'
      VolumeType: !Ref 'Volume1Type'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
      Iops: !If
        - Vol1IsIo1
        - !Ref 'Volume1Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode1Volume2:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume2Size'
      VolumeType: !Ref 'Volume2Type'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
      Iops: !If
        - Vol2IsIo1
        - !Ref 'Volume2Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode1Volume3:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume3Size'
      VolumeType: !Ref 'Volume3Type'
      AvailabilityZone: !GetAtt 'WSFCNode1.AvailabilityZone'
      Iops: !If
        - Vol3IsIo1
        - !Ref 'Volume3Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode2Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume1Size'
      VolumeType: !Ref 'Volume1Type'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
      Iops: !If
        - Vol1IsIo1
        - !Ref 'Volume1Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode2Volume2:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume2Size'
      VolumeType: !Ref 'Volume2Type'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
      Iops: !If
        - Vol2IsIo1
        - !Ref 'Volume2Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode2Volume3:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref 'Volume3Size'
      VolumeType: !Ref 'Volume3Type'
      AvailabilityZone: !GetAtt 'WSFCNode2.AvailabilityZone'
      Iops: !If
        - Vol3IsIo1
        - !Ref 'Volume3Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode3Volume1:
    Type: AWS::EC2::Volume
    Condition: ThirdAzIsFullNode
    Properties:
      Size: !Ref 'Volume1Size'
      VolumeType: !Ref 'Volume1Type'
      AvailabilityZone: !GetAtt 'WSFCNode3.AvailabilityZone'
      Iops: !If
        - Vol1IsIo1
        - !Ref 'Volume1Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode3Volume2:
    Type: AWS::EC2::Volume
    Condition: ThirdAzIsFullNode
    Properties:
      Size: !Ref 'Volume2Size'
      VolumeType: !Ref 'Volume2Type'
      AvailabilityZone: !GetAtt 'WSFCNode3.AvailabilityZone'
      Iops: !If
        - Vol2IsIo1
        - !Ref 'Volume2Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode3Volume3:
    Type: AWS::EC2::Volume
    Condition: ThirdAzIsFullNode
    Properties:
      Size: !Ref 'Volume3Size'
      VolumeType: !Ref 'Volume3Type'
      AvailabilityZone: !GetAtt 'WSFCNode3.AvailabilityZone'
      Iops: !If
        - Vol3IsIo1
        - !Ref 'Volume3Iops'
        - !Ref 'AWS::NoValue'
  WSFCNode1Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume1'
  WSFCNode1Volume2Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdc
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume2'
  WSFCNode1Volume3Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdd
      InstanceId: !Ref 'WSFCNode1'
      VolumeId: !Ref 'WSFCNode1Volume3'
  WSFCNode2Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume1'
  WSFCNode2Volume2Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdc
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume2'
  WSFCNode2Volume3Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdd
      InstanceId: !Ref 'WSFCNode2'
      VolumeId: !Ref 'WSFCNode2Volume3'
  WSFCNode3Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: ThirdAzIsFullNode
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref 'WSFCNode3'
      VolumeId: !Ref 'WSFCNode3Volume1'
  WSFCNode3Volume2Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: ThirdAzIsFullNode
    Properties:
      Device: /dev/xvdc
      InstanceId: !Ref 'WSFCNode3'
      VolumeId: !Ref 'WSFCNode3Volume2'
  WSFCNode3Volume3Attachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: ThirdAzIsFullNode
    Properties:
      Device: /dev/xvdd
      InstanceId: !Ref 'WSFCNode3'
      VolumeId: !Ref 'WSFCNode3Volume3'
  WSFCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable the WSFC and SQL AlwaysOn Availability Group communications
      VpcId: !Ref 'VPCID'
  WSFCSecurityGroupIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
  WSFCSecurityGroupIngressTcp135:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '135'
      ToPort: '135'
  WSFCSecurityGroupIngressTcp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '137'
      ToPort: '137'
  WSFCSecurityGroupIngressTcp445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
  WSFCSecurityGroupIngressTcp1433:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '1433'
      ToPort: '1434'
  WSFCSecurityGroupIngressTcp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '3343'
      ToPort: '3343'
  WSFCSecurityGroupIngressTcp5022:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '5022'
      ToPort: '5022'
  WSFCSecurityGroupIngressTcp5985:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '5985'
      ToPort: '5985'
  WSFCSecurityGroupIngressUdp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '137'
      ToPort: '137'
  WSFCSecurityGroupIngressUdp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '3343'
      ToPort: '3343'
  WSFCSecurityGroupIngressUdp1434:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '1434'
      ToPort: '1434'
  WSFCSecurityGroupIngressUdpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: udp
      FromPort: '49152'
      ToPort: '65535'
  WSFCSecurityGroupIngressTcpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WSFCSecurityGroup'
      SourceSecurityGroupId: !Ref 'WSFCSecurityGroup'
      IpProtocol: tcp
      FromPort: '49152'
      ToPort: '65535'
  SQLServerAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: Allows access to SQL Servers
  WSFCClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQL Client access ports
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          SourceSecurityGroupId: !Ref 'SQLServerAccessSecurityGroup'
Outputs:
  WSFCNode1NetBIOSName:
    Value: !Ref 'WSFCNode1NetBIOSName'
    Description: NetBIOS name of the 1st WSFC Node
  WSFCNode2NetBIOSName:
    Value: !Ref 'WSFCNode2NetBIOSName'
    Description: NetBIOS name of the 2nd WSFC Node
  WSFCNode3NetBIOSName:
    Condition: ThirdAzIsFullNode
    Value: !Ref 'WSFCNode3NetBIOSName'
    Description: NetBIOS name of the 3rd WSFC Node
  SQLServerAccessSecurityGroupID:
    Value: !Ref 'SQLServerAccessSecurityGroup'
    Description: Add instances that require access to SQL to this Security Group
