---
schemaVersion: "0.3"
description: Deploy MSSQL with SSM Automation"
# Role that is utilized to perform the steps within the Automation Document.
assumeRole: "{{AutomationAssumeRole}}"
# Gathering parameters needed to configure DCs in the Quick Start
parameters:
  WSFCNode1NetBIOSName:
    default: "WSFCNode1"
    description: "NetBIOS name of the first WSFC Node (up to 15 characters)"
    type: "String"
  WSFCNode1PrivateIP2:
    default: "10.0.0.101"
    description: "Secondary private IP for WSFC cluster on first WSFC Node"
    type: "String"
  WSFCNode1PrivateIP3:
    default: "10.0.0.102"
    description: "Third private IP for Availability Group Listener on first WSFC Node"
    type: "String"
  WSFCNode2NetBIOSName:
    default: "WSFCNode2"
    description: "NetBIOS name of the second WSFC Node (up to 15 characters)"
    type: "String"
  WSFCNode2PrivateIP2:
    default: "10.0.32.101"
    description: "Secondary private IP for WSFC cluster on first WSFC Node"
    type: "String"
  WSFCNode2PrivateIP3:
    default: "10.0.32.102"
    description: "Third private IP for Availability Group Listener on first WSFC Node"
    type: "String"
  WSFCNode3NetBIOSName:
    default: "WSFCNode3"
    description: "NetBIOS name of the third WSFC Node (up to 15 characters)"
    type: "String"
  WSFCNode3PrivateIP2:
    default: "10.0.64.101"
    description: "Fixed private IP for the first Active Directory server located in Availability Zone 1"
    type: "String"
  WSFCNode3PrivateIP3:
    default: "10.0.64.102"
    description: "Third private IP for Availability Group Listener on first WSFC Node"
    type: "String"
  WSFCFileServerNetBIOSName:
    default: "WSFCFileServer"
    description: "NetBIOS name of the WSFCFileServer (up to 15 characters)"
    type: "String"
  ClusterName:
    default: "WSFCCluster1"
    description: "NetBIOS name of the Cluster (up to 15 characters)"
    type: "String"
  ThirdAZ: 
    default: ""
    description: "Enable a 3 AZ deployment, the 3rd AZ can either be used just for the witness, or can be a full SQL cluster node."
    type: "String"
  DomainDNSName: 
    default: "example.com"
    description: "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com"
    type: "String"
  DomainNetBIOSName: 
    default: "example"
    description: "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE"
    type: "String"
  AdminSecrets:
    description: "AWS Secrets Parameter Name that has Password and User name for a domain administrator."
    type: "String"
  SQLSecrets:
    description: "AWS Secrets Parameter Name that has Password and User namer for the SQL Service Account."
    type: "String"
  QSS3BucketName:
    default: "aws-quickstart"
    description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    type: "String"
  QSS3KeyPrefix:
    default: "quickstart-microsoft-sql/"
    description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    type: "String"
  StackName:
    default: ""
    description: "Stack Name Input for cfn resource signal"
    type: "String"
  AutomationAssumeRole:
    default: ""
    description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
    type: "String"
mainSteps:
# This step grabs the Instance IDs for both nodes that will be configured as DCs in the Quick Start and Instance IDs for the for next steps.
- name: "wsfcNode1InstanceId"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: ["{{WSFCNode1NetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations[0].Instances[0].InstanceId"
    Type: "String"
- name: "wsfcNode2InstanceId"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: ["{{WSFCNode2NetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations[0].Instances[0].InstanceId"
    Type: "String"
- name: InstanceIdBranch
  action: aws:branch
  inputs:
    Choices:
    - Or:
      - Variable: "{{ThirdAZ}}"
        StringEquals: "no"
      - Variable: "{{ThirdAZ}}"
        StringEquals: "witness"
      NextStep: wsfcFileServerInstanceId
    - Variable: "{{ThirdAZ}}"
      StringEquals: "full"
      NextStep: wsfcNode3InstanceId
- name: "wsfcNode3InstanceId"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: ["{{WSFCNode3NetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations[0].Instances[0].InstanceId"
    Type: "String"
- name: "wsfcnInstanceIds"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: [ "{{WSFCNode1NetBIOSName}}","{{WSFCNode2NetBIOSName}}", "{{WSFCNode3NetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceIds
    Selector: "$.Reservations..Instances..InstanceId"
    Type: "StringList"
- name: "wsfcnInstallDscModules"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{wsfcnInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      CloudWatchLogGroupName: "/aws/Quick_Start/ActiveDirectoryDS"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/install-sql-modules.ps1"}'
      commandLine: "./install-sql-modules.ps1"
# Configures Local Configuration Manager on each of the nodes.
- name: "wsfcnLCMConfig"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{wsfcnInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      CloudWatchLogGroupName: "/aws/Quick_Start/ActiveDirectoryDS"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
      commandLine: "./LCM-Config.ps1"
- name: "wsfcnDomainJoin"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcnInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/DomainJoin.ps1"}'
      commandLine: "./DomainJoin.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}}"
- name: "wsfcnDomainConfig"
  action: aws:runCommand
  onFailure: "step:signalfailure"
  nextStep: "Node1Mof" 
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{wsfcnInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      #CloudWatchLogGroupName:
    Parameters:
      commands: 
        - |     
           function DscStatusCheck () {
               $LCMState = (Get-DscLocalConfigurationManager).LCMState
               if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                   'returning 3010, should continue after reboot'
                   exit 3010
               } else {
                 'Completed'
               }
           }
           
           Start-DscConfiguration 'C:\AWSQuickstart\DomainJoin' -Wait -Verbose -Force

           DscStatusCheck
- name: "wsfcFileServerInstanceId"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: ["{{WSFCFileServerNetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations[0].Instances[0].InstanceId"
    Type: "String"
- name: "wsfcwInstanceIds"
  action: aws:executeAwsApi
  onFailure: "step:signalfailure"
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: [ "{{WSFCNode1NetBIOSName}}","{{WSFCNode2NetBIOSName}}", "{{WSFCFileServerNetBIOSName}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceIds
    Selector: "$.Reservations..Instances..InstanceId"
    Type: "StringList"
# Installs needed Powershell DSC Modules and components on both nodes and shows how to Run a Script for an S3 Bucket.
- name: "wsfcwInstallDscModules"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{wsfcwInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      CloudWatchLogGroupName: "/aws/Quick_Start/ActiveDirectoryDS"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/install-sql-modules.ps1"}'
      commandLine: "./install-sql-modules.ps1"
# Configures Local Configuration Manager on each of the nodes.
- name: "wsfcwLCMConfig"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{wsfcwInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      CloudWatchLogGroupName: "/aws/Quick_Start/ActiveDirectoryDS"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
      commandLine: "./LCM-Config.ps1"
- name: "wsfcwDomainJoin"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcwInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/DomainJoin.ps1"}'
      commandLine: "./DomainJoin.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -AdminSecret {{AdminSecrets}}"
- name: "wsfcwDomainConfig"
  action: aws:runCommand
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{wsfcwInstanceIds.InstanceIds}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      #CloudWatchLogGroupName:
    Parameters:
      commands: 
        - |     
           function DscStatusCheck () {
               $LCMState = (Get-DscLocalConfigurationManager).LCMState
               if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                   'returning 3010, should continue after reboot'
                   exit 3010
               } else {
                 'Completed'
               }
           }
           
           Start-DscConfiguration 'C:\AWSQuickstart\DomainJoin' -Wait -Verbose -Force

           DscStatusCheck
- name: "wsfcFileServerConfig"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  nextStep: "Node1Mof"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcFileServerInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/WSFCFileShare.ps1"}'
      commandLine: "./WSFCFileShare.ps1"
- name: "Node1Mof"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  #nextStep: 
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcNode1InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
      commandLine: "./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNode1PrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -SQLSecret {{SQLSecrets}} -FileServerNetBIOSName {{WSFCFileServerNetBIOSName}}"
- name: "Node1Config"
  action: aws:runCommand
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{wsfcNode1InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      #CloudWatchLogGroupName:
    Parameters:
      commands: 
        - |     
           function DscStatusCheck () {
               $LCMState = (Get-DscLocalConfigurationManager).LCMState
               if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                   'returning 3010, should continue after reboot'
                   exit 3010
               } else {
                 'Completed'
               }
           }
           
           Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force

           DscStatusCheck
- name: "Node2Mof"
  action: "aws:runCommand"
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcNode2InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
      commandLine: "./AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode2PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -SQLSecret {{SQLSecrets}}"
- name: "Node2Config"
  action: aws:runCommand
  onFailure: "step:signalfailure"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{wsfcNode2InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      #CloudWatchLogGroupName:
    Parameters:
      commands: 
        - |     
           function DscStatusCheck () {
               $LCMState = (Get-DscLocalConfigurationManager).LCMState
               if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                   'returning 3010, should continue after reboot'
                   exit 3010
               } else {
                 'Completed'
               }
           }
           
           Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force

           DscStatusCheck
- name: 3AZFullBranch
  action: aws:branch
  inputs:
    Choices:
    - Or:
      - Variable: "{{ThirdAZ}}"
        StringEquals: "no"
      - Variable: "{{ThirdAZ}}"
        StringEquals: "witness"
      NextStep: sleepend
    - Variable: "{{ThirdAZ}}"
      StringEquals: "full"
      NextStep: Node3Mof
- name: "Node3Mof"
  action: "aws:runCommand"
  onFailure: "step:signalfailure" 
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
      - "{{wsfcNode3InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://s3.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
      commandLine: "./AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode3PrivateIP2}} -ClusterName {{ClusterName}} -AdminSecret {{AdminSecrets}} -SQLSecret {{SQLSecrets}}"
- name: "Node3Config"
  action: aws:runCommand
  onFailure: "step:signalfailure"
  nextStep: "sleepend"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{wsfcNode3InstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
      #CloudWatchLogGroupName:
    Parameters:
      commands: 
        - |     
           function DscStatusCheck () {
               $LCMState = (Get-DscLocalConfigurationManager).LCMState
               if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                   'returning 3010, should continue after reboot'
                   exit 3010
               } else {
                 'Completed'
               }
           }
           
           Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force

           DscStatusCheck
# Determines if CFN Needs to be Signaled or if Work flow should just end
- name: CFNSignalEnd
  action: aws:branch
  inputs:
    Choices:
    - NextStep: signalsuccess
      Not: 
        Variable: "{{StackName}}"
        StringEquals: ""
    - NextStep: sleepend
      Variable: "{{StackName}}"
      StringEquals: ""
# If all steps complete successfully signals CFN of Success
- name: "signalsuccess"
  action: "aws:executeAwsApi"
  isEnd: True
  inputs:
    Service: cloudformation
    Api: SignalResource
    LogicalResourceId: "WSFCNode2"
    StackName: "{{StackName}}"
    Status: SUCCESS
    UniqueId: "{{wsfcNode2InstanceId.InstanceId}}"
# If CFN Signl Not Needed this sleep ends work flow
- name: "sleepend"
  action: "aws:sleep"
  isEnd: True
  inputs:
    Duration: PT1S
# If any steps fails signals CFN of Failure
- name: "signalfailure"
  action: "aws:executeAwsApi"
  inputs:
    Service: cloudformation
    Api: SignalResource
    LogicalResourceId: "WSFCNode2"
    StackName: "{{StackName}}"
    Status: FAILURE
    UniqueId: "{{wsfcNode2InstanceId.InstanceId}}"